import tkinter as tk
from tkinter import messagebox, filedialog
import customtkinter as ctk

def caesar_encrypt(text, shift):
    result = ""
    for char in text.upper():
        if char.isalpha():
            result += chr((ord(char) - 65 + shift) % 26 + 65)
        else:
            result += char
    return result

def caesar_decrypt(text, shift):
    return caesar_encrypt(text, -shift)

def vigenere_encrypt(text, key):
    result = ""
    key = key.upper()
    key_index = 0
    for char in text.upper():
        if char.isalpha():
            shift = ord(key[key_index]) - 65
            result += chr((ord(char) - 65 + shift) % 26 + 65)
            key_index = (key_index + 1) % len(key)
        else:
            result += char
    return result

def vigenere_decrypt(text, key):
    result = ""
    key = key.upper()
    key_index = 0
    for char in text.upper():
        if char.isalpha():
            shift = ord(key[key_index]) - 65
            result += chr((ord(char) - 65 - shift) % 26 + 65)
            key_index = (key_index + 1) % len(key)
        else:
            result += char
    return result

def export_to_file(metode, mode, teks_asli, hasil, shift=None, key=None):
    file_path = filedialog.asksaveasfilename(
        title="Simpan hasil sebagai...",
        defaultextension=".txt",
        filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")]
    )
    if not file_path:
        return
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(f"=== {metode.upper()} ===\n")
        f.write(f"Mode: {mode}\n")
        f.write(f"Teks Asli: {teks_asli}\n")
        if metode == "Caesar Cipher":
            f.write(f"Shift = {shift}\n")
        elif metode == "Vigen√®re Cipher":
            f.write(f"Key = {key}\n")
        f.write("-" * 30 + "\n")
        f.write(f"Hasil: {hasil}\n")
    messagebox.showinfo("Berhasil", f"Hasil disimpan ke:\n{file_path}")

# Fungsi Utama Code
def jalankan_cipher():
    metode = metode_option.get()
    mode = mode_option.get()
    teks = teks_input.get("1.0", "end-1c").strip()
    if not teks:
        messagebox.showerror("Error", "Teks tidak boleh kosong!")
        return
    try:
        if metode == "Caesar Cipher":
            shift = int(entry_shift.get())
            hasil = caesar_encrypt(teks, shift) if mode == "Encrypt" else caesar_decrypt(teks, shift)
        elif metode == "Vigen√®re Cipher":
            key = entry_key.get()
            if not key.isalpha():
                messagebox.showerror("Error", "Key harus berupa huruf!")
                return
            hasil = vigenere_encrypt(teks, key) if mode == "Encrypt" else vigenere_decrypt(teks, key)
    except ValueError:
        messagebox.showerror("Error", "Nilai numerik tidak valid.")
        return
    hasil_box.configure(state="normal")
    hasil_box.delete("1.0", "end")
    hasil_box.insert("1.0", hasil)
    hasil_box.configure(state="disabled")

def simpan_hasil():
    metode = metode_option.get()
    mode = mode_option.get()
    teks_asli = teks_input.get("1.0", "end-1c").strip()
    hasil = hasil_box.get("1.0", "end-1c").strip()
    if not hasil:
        messagebox.showwarning("Peringatan", "Belum ada hasil untuk disimpan.")
        return
    if metode == "Caesar Cipher":
        shift = entry_shift.get()
        export_to_file(metode, mode, teks_asli, hasil, shift=shift)
    elif metode == "Vigen√®re Cipher":
        key = entry_key.get()
        export_to_file(metode, mode, teks_asli, hasil, key=key)

def update_fields(event=None):
    metode = metode_option.get()
    for widget in cipher_param_frame.winfo_children():
        widget.pack_forget()

    if metode == "Caesar Cipher":
        label_shift.pack(side="left", padx=5)
        entry_shift.pack(side="left", padx=5)
    elif metode == "Vigen√®re Cipher":
        label_key.pack(side="left", padx=5)
        entry_key.pack(side="left", padx=5)

# FW si CSS nya
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

app = ctk.CTk()
app.title("üîê Cipher Klasik - Caesar & Vigen√®re")
app.geometry("680x680")
app.resizable(False, False)

title_label = ctk.CTkLabel(app, text="Cipher Klasik: Caesar & Vigen√®re", font=("Segoe UI", 24, "bold"))
title_label.pack(pady=15)

main_frame = ctk.CTkFrame(app, corner_radius=15)
main_frame.pack(fill="both", expand=True, padx=20, pady=10)

# Bar atas sejajar (Metode + Mode + Parameter)
top_bar = ctk.CTkFrame(main_frame)
top_bar.pack(pady=10)

metode_option = ctk.CTkOptionMenu(top_bar, values=["Caesar Cipher", "Vigen√®re Cipher"], width=180, command=update_fields)
metode_option.pack(side="left", padx=10)
mode_option = ctk.CTkOptionMenu(top_bar, values=["Encrypt", "Decrypt"], width=150)
mode_option.pack(side="left", padx=10)

cipher_param_frame = ctk.CTkFrame(top_bar)
cipher_param_frame.pack(side="left", padx=10)

label_shift = ctk.CTkLabel(cipher_param_frame, text="Shift:")
entry_shift = ctk.CTkEntry(cipher_param_frame, width=70)

label_key = ctk.CTkLabel(cipher_param_frame, text="Key:")
entry_key = ctk.CTkEntry(cipher_param_frame, width=100)

update_fields()

# Input teks
ctk.CTkLabel(main_frame, text="Masukkan Teks:", font=("Segoe UI", 12, "bold")).pack(pady=(10, 0))
teks_input = ctk.CTkTextbox(main_frame, width=560, height=100, corner_radius=10)
teks_input.pack(pady=10)

# Tombol Jalankan & Simpan
button_frame = ctk.CTkFrame(main_frame)
button_frame.pack(pady=10)
ctk.CTkButton(button_frame, text="üîÑ Jalankan", width=160, command=jalankan_cipher).pack(side="left", padx=10)
ctk.CTkButton(button_frame, text="üíæ Simpan Hasil", width=160, command=simpan_hasil).pack(side="left", padx=10)

# Hasilnya disini
ctk.CTkLabel(main_frame, text="Hasil:", font=("Segoe UI", 12, "bold")).pack()
hasil_box = ctk.CTkTextbox(main_frame, width=560, height=140, state="disabled", corner_radius=10)
hasil_box.pack(pady=10)

# Bikin Tombol Keluar
ctk.CTkButton(app, text="Keluar", fg_color="#b02a2a", hover_color="#8b1f1f",
              width=150, command=app.destroy).pack(pady=10)

footer_label = ctk.CTkLabel(
    app,
    text="Salsabila Wali Datussyuhada - 20123017",
    font=("Segoe UI", 12, "italic"),
    text_color="gray"
)
footer_label.pack(pady=(0, 10))

app.mainloop()
